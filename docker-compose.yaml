version: '3.9'

services:
  redis:
    container_name: redis
    build: ./redis
    environment:
      - ALLOW_EMPTY_PASSWORD=true
      - REDIS_TLS_CERT_FILE=/opt/bitnami/redis/certs/redis.pem
      - REDIS_TLS_KEY_FILE=/opt/bitnami/redis/certs/redis-key.pem
      - REDIS_TLS_CA_FILE=/opt/bitnami/redis/certs/ca.crt
      - REDIS_TLS_ENABLED=yes
      - REDIS_TLS_AUTH_CLIENTS=yes
      - REDIS_TLS_PORT_NUMBER=6379
    volumes:
      - ./certs/redis:/opt/bitnami/redis/certs
      - ./certs/root/root-ca.pem:/opt/bitnami/redis/certs/ca.crt
      - redis_data:/bitnami/redis/data
    networks:
      - backend
  init_backend:
    container_name: backend-init-container
    build: ./backend-init-container
    volumes:
      - ./certs/backend/backend-key.pem:/opt/certs/key.pem:ro
      - ./certs/backend/backend.pem:/opt/certs/cert.pem:ro
      - ./certs/root/root-ca.pem:/opt/certs/ca.pem:ro
      - backend_certs:/opt/certs-with-perpissions/
  backend:
    container_name: backend
    build: ./backend
    depends_on:
      - postgres
      - redis
      - init_backend
    environment:
      - ADMIN_PASSWORD=secret
      - APP_HOST=0.0.0.0
      - APP_PORT=5000
      - JWT_SECRET_KEY=secret
      - SSL_ENABLE=true
      - SSL_KEY=/python-docker/certs/key.pem
      - SSL_CERT=/python-docker/certs/cert.pem
      - SSL_CA=/python-docker/certs/ca.pem
      - DATABASE_USERNAME=backend
      - DATABASE_NAME=hr
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_KEY=/python-docker/certs/key.pem
      - DATABASE_CERT=/python-docker/certs/cert.pem
      - DATABASE_CA=/python-docker/certs/ca.pem
      - DATABASE_SSL_MODE=require
      - REDIS_KEY=/python-docker/certs/key.pem
      - REDIS_CERT=/python-docker/certs/cert.pem
      - REDIS_CA=/python-docker/certs/ca.pem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_SSL=True
      - REDIS_SSL_MODE=required
    volumes:
      - backend_certs:/python-docker/certs
    ports:
      - 5000:5000
    networks:
      - backend
      - frontend
    healthcheck:
      test:
        - "CMD"
        - "python3"
        - "-c"
        - "import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); exit(0) if s.connect_ex(('localhost', 5000)) == 0 else exit(1)"
      interval: 5s
      timeout: 5s
      retries: 5
  frontend:
    container_name: frontend
    build: ./frontend
    restart: always
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./volume/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./certs/frontend/frontend-key.pem:/etc/nginx/key.pem:ro;
      - ./certs/frontend/frontend.pem:/etc/nginx/cert.pem:ro;
      - ./certs/root/root-ca.pem:/etc/nginx/ca.pem:ro;
    ports:
      - 443:443
    networks:
      - frontend
  postgres:
    container_name: database
    build: ./database
    depends_on:
      - init_postges
    command: -c ssl=on -c ssl_cert_file=/var/lib/postgresql/certs/server.crt -c ssl_key_file=/var/lib/postgresql/certs/server.key -c ssl_ca_file=/var/lib/postgresql/certs/ca.crt -c hba_file=/var/lib/postgresql/pg_hba.conf
    volumes:
      - ./volume/database/scripts:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
      - postgres_certs:/var/lib/postgresql/certs/
    environment:
      POSTGRES_PASSWORD: example
      PGPORT: 5432
    networks:
      - backend
  init_postges:
    container_name: database-init-container
    build: ./postgres-init-container
    volumes:
      - ./certs/postgres/postgres.pem:/opt/certs/server.crt:ro
      - ./certs/postgres/postgres-key.pem:/opt/certs/server.key:ro
      - ./certs/root/root-ca.pem:/opt/certs/ca.crt:ro
      - postgres_certs:/opt/certs-with-perpissions/


networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  postgres_certs:
  redis_data:
  backend_certs:
